apiVersion: v1
kind: BuildConfig
metadata:
  name: djangopipeline
  labels:
    name: djangopipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "openshift-django", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  runPolicy: Serial
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          agent {
              node {label 'python'}
          }

          environment {
              APPLICATION_NAME = 'openshift-django'
              TEMPLATE = "https://raw.githubusercontent.com/ruddra/openshift-django/develop/.openshift/templates/openshift-django-template.yaml"
              GIT_REPO="http://github.com/ruddra/openshift-django.git"
              GIT_BRANCH="develop"
              STAGE_TAG = "promoteToQA"
              DEV_PROJECT = "dev"
              STAGE_PROJECT = "stage"
              TEMPLATE_NAME = "openshift-django"
          }

          stages {
              stage('Get Latest Code') {
                  steps {
                    git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
                  }
              }
              stage('Install Virtual Environment') {
                steps {
                  script{
                    def installed = fileExists('bin/activate')
                    if(!installed){
                      sh'''
                      pip install virtualenv
                      virtualenv --no-site-packages .
                      '''
                    }
                  }
                }
              }
              stage ("Install Application Dependencies") {
                steps {
                  echo 'Installing Dependencies..'
                  sh'''
                  source bin/activate
                  pip install -r requirements.pip
                  deactivate
                  '''
                }
              }
              stage('Test Application') {
                  steps {
                    echo 'Testing..'
                    sh '''
                    source bin/activate
                    python manage.py test
                    '''
                    junit "xunittest.xml"
                  }
              }
              stage('Build Application') {
                  steps {
                      script {
                          openshift.withCluster() {
                              openshift.withProject() {
                                  openshiftBuild(buildConfig: "${APPLICATION_NAME}", showBuildLogs: 'true')
                              }
                          }
                      }
                  }
              }
              stage('Deploy Application') {
                  steps {
                      script {
                          openshift.withCluster() {
                              openshift.withProject() {
                                  openshiftDeploy(deploymentConfig: "${APPLICATION_NAME}")
                              }
                          }
                      }
                  }
              }
          }
        }
